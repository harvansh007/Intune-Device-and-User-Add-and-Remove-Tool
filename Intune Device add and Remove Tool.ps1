<#
    .NOTES
    --------------------------------------------------------------------------------
     Code generated by:  EndUserSupport
     Generated on:       09-01-2025 16:26
     Generated by:       Harvansh Singh
     Git Hub :           https://github.com/harvansh007
     Website :           https://endusersupports.com/
     LinkEdin Account    https://www.linkedin.com/in/harvansh-singh-mvp-8a320658/
     FaceBook :          https://www.facebook.com/groups/1471644366315967
     Twitter  :          https://x.com/Vansh0072010
    --------------------------------------------------------------------------------
    .DESCRIPTION
        GUI script generated by Harvansh Singh
#>

#------------------------------------------------------------------------
# Source File Information (DO NOT MODIFY)
# Source File: ..\Intune Device add and Remove Tool.psf
#------------------------------------------------------------------------
#region File Recovery Data (DO NOT MODIFY)
<#RecoveryData:
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#>
#endregion


#----------------------------------------------
#region Application Functions
#----------------------------------------------

#endregion Application Functions

#----------------------------------------------
# Generated Form Function
#----------------------------------------------

function Show-Intune_Device_add_and_Remove_Tool_psf {

	#----------------------------------------------
	#region Import the Assemblies
	#----------------------------------------------
	[void][reflection.assembly]::Load('System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a')
	[void][reflection.assembly]::Load('System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089')
    [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
	#endregion Import Assemblies

	#----------------------------------------------
	#region Generated Form Objects
	#----------------------------------------------
	[System.Windows.Forms.Application]::EnableVisualStyles()
	$formDesignByHarvanshSing = New-Object 'System.Windows.Forms.Form'
	$Connect = New-Object 'System.Windows.Forms.Button'
	$RemoveUsers = New-Object 'System.Windows.Forms.Button'
	$RemoveDevice = New-Object 'System.Windows.Forms.Button'
	$GroupDetails = New-Object 'System.Windows.Forms.Button'
	$GroupMembership = New-Object 'System.Windows.Forms.Button'
	$AddUser = New-Object 'System.Windows.Forms.Button'
	$AddDevice = New-Object 'System.Windows.Forms.Button'
	$Output = New-Object 'System.Windows.Forms.TextBox'
	$Groupname = New-Object 'System.Windows.Forms.TextBox'
	$Computer = New-Object 'System.Windows.Forms.TextBox'
	$groupbox2 = New-Object 'System.Windows.Forms.GroupBox'
	$labelOutput = New-Object 'System.Windows.Forms.Label'
	$labelGroupName = New-Object 'System.Windows.Forms.Label'
	$labelDeviceEmailID = New-Object 'System.Windows.Forms.Label'
	$groupbox1 = New-Object 'System.Windows.Forms.GroupBox'
	$InitialFormWindowState = New-Object 'System.Windows.Forms.FormWindowState'
	#endregion Generated Form Objects

	#----------------------------------------------
	# User Generated Script
	#----------------------------------------------
	
	$formDesignByHarvanshSing_Load={
		#TODO: Initialize Form Controls here
		
	}
	
	# --End User Generated Script--
	#----------------------------------------------
	#region Generated Events
	#----------------------------------------------
	
	$Form_StateCorrection_Load=
	{
		#Correct the initial state of the form to prevent the .Net maximized form issue
		$formDesignByHarvanshSing.WindowState = $InitialFormWindowState
	}
	
	$Form_Cleanup_FormClosed=
	{
		#Remove all event handlers from the controls
		try
		{
			$formDesignByHarvanshSing.remove_Load($formDesignByHarvanshSing_Load)
			$formDesignByHarvanshSing.remove_Load($Form_StateCorrection_Load)
			$formDesignByHarvanshSing.remove_FormClosed($Form_Cleanup_FormClosed)
		}
		catch { Out-Null <# Prevent PSScriptAnalyzer warning #> }
	}
	#endregion Generated Events

	#----------------------------------------------
	#region Generated Form Code
	#----------------------------------------------
	$formDesignByHarvanshSing.SuspendLayout()
	$groupbox2.SuspendLayout()
	#
	# formDesignByHarvanshSing
	#
	$formDesignByHarvanshSing.Controls.Add($Connect)
	$formDesignByHarvanshSing.Controls.Add($RemoveUsers)
	$formDesignByHarvanshSing.Controls.Add($RemoveDevice)
	$formDesignByHarvanshSing.Controls.Add($GroupDetails)
	$formDesignByHarvanshSing.Controls.Add($GroupMembership)
	$formDesignByHarvanshSing.Controls.Add($AddUser)
	$formDesignByHarvanshSing.Controls.Add($AddDevice)
	$formDesignByHarvanshSing.Controls.Add($Output)
	$formDesignByHarvanshSing.Controls.Add($Groupname)
	$formDesignByHarvanshSing.Controls.Add($Computer)
	$formDesignByHarvanshSing.Controls.Add($groupbox2)
	$formDesignByHarvanshSing.Controls.Add($groupbox1)
	$formDesignByHarvanshSing.AutoScaleDimensions = '6, 13'
	$formDesignByHarvanshSing.AutoScaleMode = 'Font'
	$formDesignByHarvanshSing.BackColor = 'ButtonFace'
	$formDesignByHarvanshSing.ClientSize = '930, 507'
	$formDesignByHarvanshSing.Name = 'formDesignByHarvanshSing'
	$formDesignByHarvanshSing.Text = 'Design by Harvansh Singh'
	$formDesignByHarvanshSing.add_Load($formDesignByHarvanshSing_Load)
	#
	# Connect
	#
	$Connect.BackColor = 'ActiveCaption'
	$Connect.Font = 'Microsoft Sans Serif, 12pt'
	$Connect.Location = '756, 13'
	$Connect.Name = 'Connect'
	$Connect.Size = '139, 31'
	$Connect.TabIndex = 11
	$Connect.Text = 'Connect'
	$Connect.UseCompatibleTextRendering = $True
	$Connect.UseVisualStyleBackColor = $False
    $Connect.Add_Click({Connect})
	#
	# RemoveUsers
	#
	$RemoveUsers.BackColor = 'Coral'
	$RemoveUsers.Font = 'Microsoft Tai Le, 11.25pt, style=Bold, Italic, Underline'
	$RemoveUsers.ForeColor = 'Transparent'
	$RemoveUsers.Location = '260, 440'
	$RemoveUsers.Name = 'RemoveUsers'
	$RemoveUsers.Size = '260, 50'
	$RemoveUsers.TabIndex = 10
	$RemoveUsers.Text = 'Remove Users from Group'
	$RemoveUsers.UseCompatibleTextRendering = $True
	$RemoveUsers.UseVisualStyleBackColor = $False
    $RemoveUsers.Add_Click({RemoveUser})
	#
	# RemoveDevice
	#
	$RemoveDevice.BackColor = 'Coral'
	$RemoveDevice.Font = 'Microsoft Tai Le, 11.25pt, style=Bold, Italic, Underline'
	$RemoveDevice.ForeColor = 'Transparent'
	$RemoveDevice.Location = '260, 380'
	$RemoveDevice.Name = 'RemoveDevice'
	$RemoveDevice.Size = '260, 50'
	$RemoveDevice.TabIndex = 9
	$RemoveDevice.Text = 'Remove Device from Group'
	$RemoveDevice.UseCompatibleTextRendering = $True
	$RemoveDevice.UseVisualStyleBackColor = $False
    $RemoveDevice.Add_Click({RemoveDevice})
	#
	# GroupDetails
	#
	$GroupDetails.BackColor = 'Turquoise'
	$GroupDetails.Font = 'Microsoft Tai Le, 11.25pt, style=Bold'
	$GroupDetails.ForeColor = 'Transparent'
	$GroupDetails.Location = '261, 320'
	$GroupDetails.Name = 'GroupDetails'
	$GroupDetails.Size = '260, 50'
	$GroupDetails.TabIndex = 8
	$GroupDetails.Text = 'Get Group Details'
	$GroupDetails.UseCompatibleTextRendering = $True
	$GroupDetails.UseVisualStyleBackColor = $False
    $GroupDetails.Add_Click({GroupDetails})
	#
	# GroupMembership
	#
	$GroupMembership.BackColor = 'Turquoise'
	$GroupMembership.Font = 'Microsoft Tai Le, 11.25pt, style=Bold'
	$GroupMembership.ForeColor = 'Transparent'
	$GroupMembership.Location = '260, 260'
	$GroupMembership.Name = 'GroupMembership'
	$GroupMembership.Size = '260, 50'
	$GroupMembership.TabIndex = 7
	$GroupMembership.Text = 'Get Group Membership'
	$GroupMembership.UseCompatibleTextRendering = $True
	$GroupMembership.UseVisualStyleBackColor = $False
    $GroupMembership.Add_Click({GroupMembership})
	#
	# AddUser
	#
	$AddUser.BackColor = 'Turquoise'
	$AddUser.Font = 'Microsoft Tai Le, 11.25pt, style=Bold'
	$AddUser.ForeColor = 'Transparent'
	$AddUser.Location = '260, 200'
	$AddUser.Name = 'AddUser'
	$AddUser.Size = '260, 50'
	$AddUser.TabIndex = 6
	$AddUser.Text = 'Add User to Group'
	$AddUser.UseCompatibleTextRendering = $True
	$AddUser.UseVisualStyleBackColor = $False
    $AddUser.Add_Click({AddUser})
	#
	# AddDevice
	#
	$AddDevice.BackColor = 'Turquoise'
	$AddDevice.FlatAppearance.BorderColor = 'White'
	$AddDevice.FlatAppearance.BorderSize = 2
	$AddDevice.FlatAppearance.MouseDownBackColor = 'Linen'
	$AddDevice.FlatAppearance.MouseOverBackColor = 'White'
	$AddDevice.Font = 'Microsoft Tai Le, 11.25pt, style=Bold'
	$AddDevice.ForeColor = 'Transparent'
	$AddDevice.Location = '260, 140'
	$AddDevice.Name = 'AddDevice'
	$AddDevice.Size = '260, 50'
	$AddDevice.TabIndex = 5
	$AddDevice.Text = 'Add Device to Group'
	$AddDevice.UseCompatibleTextRendering = $True
	$AddDevice.UseVisualStyleBackColor = $False
    $AddDevice.Add_Click({AddDevice})
	#
	# Output
	#
	$Output.BackColor = 'ButtonFace'
	$Output.Font = 'Microsoft Sans Serif, 11pt'
	$Output.Location = '537, 103'
	$Output.Multiline = $True
	$Output.Name = 'Output'
	$Output.ScrollBars = 'Both'
	$Output.Size = '381, 392'
	$Output.TabIndex = 4
	#
	# Groupname
	#
	$Groupname.Font = 'Microsoft Sans Serif, 11pt'
	$Groupname.Location = '261, 103'
	$Groupname.Name = 'Groupname'
	$Groupname.Size = '260, 24'
	$Groupname.TabIndex = 3
	#
	# Computer
	#
	#$Computer.BackColor = 'ButtonFace'
	$Computer.Font = 'Microsoft Sans Serif, 11pt'
	$Computer.Location = '13, 103'
	$Computer.Multiline = $True
	$Computer.Name = 'Computer'
	$Computer.ScrollBars = 'Both'
	$Computer.Size = '230, 392'
	$Computer.TabIndex = 2
	#
	# groupbox2
	#
	$groupbox2.Controls.Add($labelOutput)
	$groupbox2.Controls.Add($labelGroupName)
	$groupbox2.Controls.Add($labelDeviceEmailID)
	$groupbox2.BackColor = 'Azure'
	$groupbox2.Location = '13, 50'
	$groupbox2.Name = 'groupbox2'
	$groupbox2.Size = '905, 47'
	$groupbox2.TabIndex = 1
	$groupbox2.TabStop = $False
	$groupbox2.UseCompatibleTextRendering = $True
	#
	# labelOutput
	#
	$labelOutput.AutoSize = $True
	$labelOutput.Font = 'Microsoft Sans Serif, 12pt'
	$labelOutput.Location = '524, 20'
	$labelOutput.Name = 'labelOutput'
	$labelOutput.Size = '55, 24'
	$labelOutput.TabIndex = 2
	$labelOutput.Text = 'Output'
	$labelOutput.UseCompatibleTextRendering = $True
	#
	# labelGroupName
	#
	$labelGroupName.AutoSize = $True
	$labelGroupName.Font = 'Microsoft Sans Serif, 12pt'
	$labelGroupName.Location = '248, 16'
	$labelGroupName.Name = 'labelGroupName'
	$labelGroupName.Size = '100, 24'
	$labelGroupName.TabIndex = 1
	$labelGroupName.Text = 'Group Name'
	$labelGroupName.UseCompatibleTextRendering = $True
	#
	# labelDeviceEmailID
	#
	$labelDeviceEmailID.AutoSize = $True
	$labelDeviceEmailID.Font = 'Microsoft Sans Serif, 12pt'
	$labelDeviceEmailID.Location = '6, 16'
	$labelDeviceEmailID.Name = 'labelDeviceEmailID'
	$labelDeviceEmailID.Size = '132, 24'
	$labelDeviceEmailID.TabIndex = 0
	$labelDeviceEmailID.Text = 'Device / Email ID'
	$labelDeviceEmailID.UseCompatibleTextRendering = $True
	#
	# groupbox1
	#
	$groupbox1.BackColor = 'Gray'
	$groupbox1.Font = 'Microsoft Sans Serif, 15pt'
	$groupbox1.ForeColor = 'HighlightText'
	$groupbox1.Location = '260, 9'
	$groupbox1.Name = 'groupbox1'
	$groupbox1.Size = '392, 35'
	$groupbox1.TabIndex = 0
	$groupbox1.TabStop = $False
	$groupbox1.Text = 'Intune Device/User Add and Remove Tool'
	$groupbox1.UseCompatibleTextRendering = $True
	$groupbox2.ResumeLayout()
	$formDesignByHarvanshSing.ResumeLayout()
	#endregion Generated Form Code
#---------------------- Start Writing Code for Device and User Group-----------------------

#----------------------------------------------

if ((Get-InstalledModule microsoft.graph.authentication | Select-Object -expandproperty Version).major -ge 2) {
    $Output.Lines += "Microsoft Intune Graph Already Installed"
    Import-Module -Name microsoft.graph.authentication
} 
else {
    try {
        Install-Module -Name Microsoft.Graph -Scope CurrentUser -Repository PSGallery -Force 
        $Output.Lines += "Installaing Micosoft Graph Module"
        Import-Module -Name microsoft.graph.authentication
    }
    catch [Exception] {
        $_.message 
        $Output.Lines += "$($_.message)"
        exit
    }
}



#-----------------------------------------------Connect-----------------------------------------

 Function Connect {
                        
$graph = Connect-MgGraph -ErrorVariable MyError

if ($graph -match "Welcome to Microsoft Graph!" )
    
    { 
    
    $Output.Lines += "Welcome to Microsoft Intune"

    }

else { 

 $Output.Lines +=  $MyError
 
 }


        $upn = (Get-MgContext).Account
        $Userid = (Get-MgUser -ConsistencyLevel eventual -Count userCount  -Search  UserPrincipalName:$((Get-MgContext).Account)).Id
        $MemberOf = (Get-MgUserMemberOf -UserId $Userid | Select-Object *).AdditionalProperties.displayName   
    
        
        if(($MemberOf  -eq "Intune Administrator") -or  ($MemberOf  -eq "Global Administrator"))
        {
        $Output.Lines += "You have logged in with $((Get-MgContext).Account) account and you have sufficient Permission to Add/Remove Device"
        }
        else {
        $Output.Lines += "You have logged in with $((Get-MgContext).Account), Sorry you do not have sufficient Permission to Add/Remove Devices, Please check if you have Intune or Global Administrator permissions on your account"
        }


 }

#==================================================  Add Device to The Group ======================================

   function Adddevice
   
   {
        
        if((Get-MgContext).Account -eq $null )
            {$Output.Lines += "You have not logged in, Please click on Connect to login in Intune/Entra" }
           else {
            $upn = (Get-MgContext).Account
            $Userid = (Get-MgUser -ConsistencyLevel eventual -Count userCount  -Search  UserPrincipalName:$((Get-MgContext).Account)).Id
            $MemberOf = (Get-MgUserMemberOf -UserId $Userid | Select-Object *).AdditionalProperties.displayName 

           if(!(($MemberOf  -eq "Intune Administrator") -or  ($MemberOf  -eq "Global Administrator")))
                {$Output.Lines += "$((Get-MgContext).Account) : Dont have Intune or Global Administrator Permission" }
                    Else {
                        if(($Computer.Text -eq "") -or ($Groupname.text -eq ""))
                            {[Windows.Forms.MessageBox]::Show("Please enter Computer Name and Group Name")}
               
                    else {
          #========================  Group ID ===========================
                        $groupnames = $Groupname.text
                        $Groups =  Get-MgGroup -Filter "DisplayName eq '$($Groupnames)'" | Select-Object id, displayName

                            if(!($Groups.displayName -eq $groupnames))
                                        
                                     {$Output.Lines += "$($Groupnames) : Group is not found in Intune/Entra" }

                                        
          
                                 #========================= To Collect Device ID from the List =====================
                                      else {

                                                $Output.Lines += "========== Collecting Device IDs =============" 
                                                $Groupid = $Groups.Id
                      
                                                $ComputerName = $Computer.Lines

                                                $Deviceid = @()
                                                        foreach($Computers in $ComputerName)
                                                            {  
                                                       
                                                        $DevceIDs = Get-MgDevice -Filter "displayName eq '$($Computers)'" | select Id, DisplayName
                                                        $Deviceid += $DevceIDs.id

                                                            }
                                                
                                                $GroupMemberid = (Get-MgGroupMember -GroupId $groupid).id
                                              
                                                $Output.Lines += "====== Adding Devices to Group ===="

                                                foreach ($deviceids in $Deviceid)
                                              {
                                                    if ($deviceids -in $GroupMemberid)

                                                    {$Output.Lines += "$((Get-MgDevice -Filter "ID eq '$($deviceids)'").DisplayName) : Already in Group"}

                                                    else {
                                                     $addbody = @{"@odata.id"= "https://graph.microsoft.com/v1.0/directoryObjects/$deviceids"}
                                                     New-MgGroupMemberByRef -GroupId $groupId -BodyParameter $addbody
                                                     $Output.Lines += "$((Get-MgDevice -Filter "ID eq '$($deviceids)'").DisplayName) : Added to Group"
                                                     }
                         
                                                     }
                                            }
                                    }
                      }
                }
         }

                        
          


#======================================  Remvoe Device from the Group    ===============================

function RemoveDevice

     {
        if((Get-MgContext).Account -eq $null )
           {$Output.Lines += "You have not logged in, Please click on Connect to login in Intune/Entra" }
           else {
           $upn = (Get-MgContext).Account
           $Userid = (Get-MgUser -ConsistencyLevel eventual -Count userCount  -Search  UserPrincipalName:$((Get-MgContext).Account)).Id
           $MemberOf = (Get-MgUserMemberOf -UserId $Userid | Select-Object *).AdditionalProperties.displayName
           if(!(($MemberOf  -eq "Intune Administrator") -or  ($MemberOf  -eq "Global Administrator")))
                {$Output.Lines += "$((Get-MgContext).Account) : Dont have Intune or Global Administrator Permission" } 
           
            Else {
                if(($Computer.Text -eq "") -or ($Groupname.text -eq ""))
                    {[Windows.Forms.MessageBox]::Show("Please enter Computer Name and Group Name")}
               
                    else {
          #========================  Group ID =====================================
                        $groupnames = $Groupname.text
                        $Groups =  Get-MgGroup -Filter "DisplayName eq '$($Groupnames)'" | Select-Object id, displayName

                            if(!($Groups.displayName -eq $groupnames))
                                        
                                     {$Output.Lines += "$($Groupnames) : Group is not found in Intune/Entra" }

                                        
          
                                 #========================= To Collect Device ID from the List =====================
                                      else {

                                                $Output.Lines += "========== Collecting Device IDs =============" 
                                                $Groupid = $Groups.Id
                      
                                                $ComputerName = $Computer.Lines 

                                                $Deviceid = @()
                                                        foreach($Computers in $ComputerName)
                                                            {  
                                                       
                                                        $DevceIDs = Get-MgDevice -Filter "displayName eq '$($Computers)'" | select Id, DisplayName
                                                        $Deviceid += $DevceIDs.id

                                                            }
                                                
                                                $GroupMemberid = (Get-MgGroupMember -GroupId $groupid).id
                                                
                                                $Output.Lines += "========== Removing Devices from the Group ==="

                                                foreach ($deviceids in $Deviceid)
                                              {
                                                    if (!($deviceids -in $GroupMemberid))

                                                    {$Output.Lines += "$((Get-MgDevice -Filter "ID eq '$($deviceids)'").DisplayName) : Not in Group"}

                                                    else {
                                                     
                                                     Remove-MgGroupMemberByRef -GroupId $groupId -DirectoryObjectId $deviceids
                                                     $Output.Lines += "$((Get-MgDevice -Filter "ID eq '$($deviceids)'").DisplayName) : Removed from the Group"
                                                     }
                         
                                                     }
                                            }
                                    }
                                }
                       
                       
                        }
                       
                        }
                        
          


 #======================================  Check Devices in Group    ===============================

function GroupMembership

    {
           if((Get-MgContext).Account -eq $null )
            {$Output.Lines += "You have not logged in, Please click on Connect to login in Intune/Entra" }
                else {
            $upn = (Get-MgContext).Account
            $Userid = (Get-MgUser -ConsistencyLevel eventual -Count userCount  -Search  UserPrincipalName:$((Get-MgContext).Account)).Id
            $MemberOf = (Get-MgUserMemberOf -UserId $Userid | Select-Object *).AdditionalProperties.displayName
            if(!(($MemberOf  -eq "Intune Administrator") -or  ($MemberOf  -eq "Global Administrator") -or  ($MemberOf  -eq "Global Reader")))
                {$Output.Lines += "$((Get-MgContext).Account) : Dont have Intune or Global Administrator or Global Reader Permission" }
            Else {
                if($Groupname.text -eq "")
                    {[Windows.Forms.MessageBox]::Show("Please enter the Group Name")}
                        else 
                              {
            #========================  Group ID =====================================
                $groupnames = $Groupname.text
                $Groups =  Get-MgGroup -Filter "DisplayName eq '$($Groupnames)'"  | Select-Object *

                 if(!($Groups.displayName -eq $groupnames))
                                        
                    {$Output.Lines += "$($Groupnames) : Group is not found in Intune/Entra" }
                   
                   else
                    {

                    $Groupdetails =  Get-MgGroup -Filter "DisplayName eq '$($Groupnames)'"  | Select-Object *
                    $groupid = $Groupdetails.Id

                     $Groupmember =  Get-MgGroupMember -GroupId $groupid | Select-Object *
                     $devicedisplayname =  $Groupmember.AdditionalProperties.displayName 
                     #$devicemail = $Groupmember.AdditionalProperties.userPrincipalName               
                                     
                    $devicelists = $devicelist | Out-String 
                    $Output.Lines += "========== Members in Group ============="
                    $Output.Lines += $devicedisplayname 
                    
                    }
                    }
                }
    
             }     
             
          }           

 #==================================================  Add User to The Group ======================================

   function AddUser
   
   {
        if((Get-MgContext).Account -eq $null )
          {$Output.Lines += "You have not logged in, Please click on Connect to login in Intune/Entra" }
         else {
         $upn = (Get-MgContext).Account
         $Userid = (Get-MgUser -ConsistencyLevel eventual -Count userCount  -Search  UserPrincipalName:$((Get-MgContext).Account)).Id
          $MemberOf = (Get-MgUserMemberOf -UserId $Userid | Select-Object *).AdditionalProperties.displayName
          if(!(($MemberOf  -eq "Intune Administrator") -or  ($MemberOf  -eq "Global Administrator")))
                {$Output.Lines += "$((Get-MgContext).Account) : Dont have Intune or Global Administrator Permission" }
           
            Else {
   
            if(($Computer.Text -eq "") -or ($Groupname.text -eq ""))
                {[Windows.Forms.MessageBox]::Show("Please enter User Email id and Group Name")}
               
                    else {
          #========================  Group ID =====================================
                        $groupnames = $Groupname.text
                        #$groupnames = "Test"
                        $Groups =  Get-MgGroup -Filter "DisplayName eq '$($Groupnames)'" | Select-Object id, displayName

                            if(!($Groups.displayName -eq $groupnames))
                                        
                                     {$Output.Lines += "$($Groupnames) : Group is not found in Intune/Entra" }

                                        
          
                                 #========================= To Collect Device ID from the List =====================
                                      else {

                                                $Output.Lines += "========== Collecting User IDs =============" 
                                                $Groupid = $Groups.Id
                      
                                                $UserName = $Computer.Lines
                                                #$UserName = "admin@eusclouds.onmicrosoft.com"

                                                $Userid = @()
                                                        foreach($User in $UserName)
                                                            {  
                                                       
                                                        $Userlist = Get-MgUser -Filter "UserPrincipalName eq '$($User)'" | select Id, UserPrincipalName
                                                        $Userid += $Userlist.id

                                                            }
                                                
                                                $GroupMemberid = (Get-MgGroupMember -GroupId $groupid).id
                                                
                                                $Output.Lines += "====== Adding Users to Group ======="

                                                foreach ($userids in $userid)
                                                    {
                                                    if ($userids -in $GroupMemberid)

                                                    {$Output.Lines += "$((Get-MgUser -Filter "ID eq '$($userids)'").UserPrincipalName) : Already in Group"}

                                                    else {
                                                     $addbody = @{"@odata.id"= "https://graph.microsoft.com/v1.0/directoryObjects/$userids"}
                                                     New-MgGroupMemberByRef -GroupId $groupId -BodyParameter $addbody
                                                     $Output.Lines += "$((Get-MgUser -Filter "ID eq '$($userids)'").UserPrincipalName) : Added to Group"
                                                     }
                         
                                                     }
                                            }
                                    }
                                }
                 }       
          }

#======================================  Remvoe Users from the Group    ===============================

function RemoveUser

     {
        if((Get-MgContext).Account -eq $null )
            {$Output.Lines += "You have not logged in, Please click on Connect to login in Intune/Entra" }
            else {
            $upn = (Get-MgContext).Account
            $Userid = (Get-MgUser -ConsistencyLevel eventual -Count userCount  -Search  UserPrincipalName:$((Get-MgContext).Account)).Id
            $MemberOf = (Get-MgUserMemberOf -UserId $Userid | Select-Object *).AdditionalProperties.displayName
            if(!(($MemberOf  -eq "Intune Administrator") -or  ($MemberOf  -eq "Global Administrator")))
                {$Output.Lines += "$((Get-MgContext).Account) : Dont have Intune or Global Administrator Permission" }
            
            Else {
            if(($Computer.Text -eq "") -or ($Groupname.text -eq ""))
                {[Windows.Forms.MessageBox]::Show("Please enter User Email id and Group Name")}
               
                    else {
          #========================  Group ID =====================================
                        $groupnames = $Groupname.text
                        $Groups =  Get-MgGroup -Filter "DisplayName eq '$($Groupnames)'" | Select-Object id, displayName

                            if(!($Groups.displayName -eq $groupnames))
                                        
                                     {$Output.Lines += "$($Groupnames) : Group is not found in Intune/Entra" }

                                        
          
                                 #========================= To Collect Device ID from the List =====================
                                      else {

                                                $Output.Lines += "========== Collecting Device IDs =============" 
                                                $Groupid = $Groups.Id
                      
                                                $ComputerName = $Computer.Lines 

                                                $Userid = @()
                                                        foreach($User in $ComputerName)
                                                            {  
                                                       
                                                        $Userlist = Get-MgUser -Filter "UserPrincipalName eq '$($User)'" | select Id, UserPrincipalName
                                                        $Userid += $Userlist.id

                                                            }
                                                
                                                $GroupMemberid = (Get-MgGroupMember -GroupId $groupid).id
                                                
                                                $Output.Lines += "========== Removing Devices from the Group ==="

                                                foreach ($Userids in $Userid)
                                                {
                                                    if (!($userids -in $GroupMemberid))

                                                    {$Output.Lines += "$((Get-MgUser -Filter "ID eq '$($userids)'").UserPrincipalName) : Not in Group"}

                                                    else {
                                                     
                                                    Remove-MgGroupMemberByRef -GroupId $groupId -DirectoryObjectId $Userids
                                                    $Output.Lines += "$((Get-MgUser -Filter "ID eq '$($userids)'").UserPrincipalName) : Removed from the Group"
                                                    #Write-host "$((Get-MgUser -Filter "ID eq '$($userids)'").UserPrincipalName) : Removed from the Group"

                                                         }
                                                }
                                      }
                        }
          
          }
        }
       }             

#==================================== Group Details =========================================

function GroupDetails

    {
       if((Get-MgContext).Account -eq $null )
           {$Output.Lines += "You have not logged in, Please click on Connect to login in Intune/Entra" }
           else {
           $upn = (Get-MgContext).Account
            $Userid = (Get-MgUser -ConsistencyLevel eventual -Count userCount  -Search  UserPrincipalName:$((Get-MgContext).Account)).Id
            $MemberOf = (Get-MgUserMemberOf -UserId $Userid | Select-Object *).AdditionalProperties.displayName
            if(!(($MemberOf  -eq "Intune Administrator") -or  ($MemberOf  -eq "Global Administrator") -or  ($MemberOf  -eq "Global Reader")))
                {$Output.Lines += "$((Get-MgContext).Account) : Dont have Intune or Global Administrator or Global Reader Permission" }
             Else {
            if($Groupname.text -eq "")
            {[Windows.Forms.MessageBox]::Show("Please enter the Group Name")}
                else 
                    {
        #========================  Group ID =====================================
                $groupnames = $Groupname.text
                $Groups =  Get-MgGroup -Filter "DisplayName eq '$($Groupnames)'"  | Select-Object *

                 if(!($Groups.displayName -eq $groupnames))
                                        
                    {$Output.Lines += "$($Groupnames) : Group is not found in Intune/Entra" }
                   
                   else
                    {

                   $Groups =  Get-MgGroup -Filter "DisplayName eq '$($Groupnames)'"  | Select-Object *
                   $groupdetail = $Groups | Select-Object displayName, groupTypes, membershipRule, createdDateTime, onPremisesLastSyncDateTime,description,renewedDateTime

                    $groupid = $Groups.Id
                    $devicecount =  Get-MgGroupMemberCount -GroupId $groupId -ConsistencyLevel eventual 

                    $GroupData = [PSCustomObject]@{

                    "Group Name" = $groupdetail.displayName
                    "Description" = $groupdetail.description
                    "Device Count" = $devicecount
                    "Group Creation Time" = $groupdetail.createdDateTime
                    "Last Update Time" = $groupdetail.renewedDateTime
                    "Group Membership Rule" = $groupdetail.membershipRule
                    "OnPremLastSync" = $groupdetail.onPremisesLastSyncDateTime
                     
                    }
                                     
                    $Groupdetails = $GroupData  | Format-List  | Out-String 
                    $Output.Lines += "========== Group Details============="
                    $Output.Lines += $Groupdetails.trim()
                    }
                    }
          }
        }
    }
	#----------------------------------------------

	#Save the initial state of the form
	$InitialFormWindowState = $formDesignByHarvanshSing.WindowState
	#Init the OnLoad event to correct the initial state of the form
	$formDesignByHarvanshSing.add_Load($Form_StateCorrection_Load)
	#Clean up the control events
	$formDesignByHarvanshSing.add_FormClosed($Form_Cleanup_FormClosed)
	#Show the Form
	return $formDesignByHarvanshSing.ShowDialog()

} #End Function

#Call the form
Show-Intune_Device_add_and_Remove_Tool_psf | Out-Null
